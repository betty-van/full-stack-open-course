{"version":3,"sources":["components/Note.js","services/notes.js","components/Notification.js","components/Footer.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","request","axios","get","nonExisting","id","date","then","response","data","concat","newObject","post","put","Notification","message","Footer","style","color","fontStyle","fontSize","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","notesToShow","filter","useEffect","noteService","initialNotes","map","key","find","n","changedNote","returnedNote","catch","error","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","Date","toISOString","Math","random","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"+OAaeA,EAXF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACZC,EAAQF,EAAKG,UACX,qBAAuB,iBAC/B,OACI,wBAAIC,UAAU,QACTJ,EAAKK,QACN,4BAAQC,QAASL,GAAmBC,K,gBCiBjC,EAtBA,WACX,IAAMK,EAAUC,IAAMC,IAHV,UAINC,EAAc,CAChBC,GAAI,IACJN,QAAS,uCACTO,KAAM,2BACNT,WAAW,GAEf,OAAOI,EAAQM,MAAK,SAAAC,GAAQ,OAAIA,EAASC,KAAKC,OAAON,OAc1C,EAVA,SAAAO,GAEX,OADgBT,IAAMU,KAfV,SAewBD,GACrBJ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAQ9B,EALA,SAACJ,EAAIM,GAEhB,OADgBT,IAAMW,IAAN,UApBJ,SAoBI,YAAwBR,GAAMM,GAC/BJ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SCR9BK,EAZM,SAAC,GAAe,IAAdC,EAAa,EAAbA,QACnB,OAAgB,OAAZA,EACO,KAIP,yBAAKjB,UAAU,SACViB,ICOEC,EAdA,WAOX,OACI,yBAAKC,MAPW,CAChBC,MAAO,QACPC,UAAW,SACXC,SAAU,KAKN,6BACA,6FCkFGC,EAxFH,WAAO,IAAD,EACYC,mBAAS,IADrB,mBACPC,EADO,KACAC,EADA,OAEgBF,mBAAS,IAFzB,mBAEPG,EAFO,KAEEC,EAFF,OAGgBJ,oBAAS,GAHzB,mBAGPK,EAHO,KAGEC,EAHF,OAI0BN,mBAAS,MAJnC,mBAIPO,EAJO,KAIOC,EAJP,KAMRC,EAAcJ,EACdJ,EACAA,EAAMS,QAAO,SAAAtC,GAAI,OAAIA,EAAKG,aAEhCoC,qBAAU,WACNC,IAEK3B,MAAK,SAAA4B,GACFX,EAASW,QAElB,IAmDH,OACI,6BACI,qCACA,kBAAC,EAAD,CAAcpB,QAASc,IACvB,6BACI,4BAAQ7B,QAAS,kBAAM4B,GAAYD,KAAnC,QACUA,EAAU,YAAc,QAGtC,4BAtCUI,EAAYK,KAAI,SAAA1C,GAAI,OAClC,kBAAC,EAAD,CACI2C,IAAK3C,EAAKW,GACVX,KAAMA,EACNC,iBAAkB,kBAxBC,SAAAU,GACvB,IAAMX,EAAO6B,EAAMe,MAAK,SAAAC,GAAC,OAAIA,EAAElC,KAAOA,KAChCmC,EAAW,eAAQ9C,EAAR,CAAcG,WAAYH,EAAKG,YAEhDqC,EACY7B,EAAImC,GACXjC,MAAK,SAAAkC,GACFjB,EAASD,EAAMa,KAAI,SAAA1C,GAAI,OAAIA,EAAKW,KAAOA,EAAKX,EAAO+C,SAEtDC,OAAM,SAAAC,GACHb,EAAe,gBACFpC,EAAKK,QADH,sCAGf6C,YAAW,WACPd,EAAgB,QACjB,KACHN,EAASD,EAAMS,QAAO,SAAAO,GAAC,OAAIA,EAAElC,KAAOA,SAQhBwC,CAAmBnD,EAAKW,WAqChD,0BAAMyC,SAjCE,SAACC,GACbA,EAAMC,iBACN,IAAMC,EAAa,CACflD,QAAS0B,EACTnB,MAAM,IAAI4C,MAAOC,cACjBtD,UAAWuD,KAAKC,SAAW,IAG/BnB,EACYe,GACP1C,MAAK,SAAAkC,GACFjB,EAASD,EAAMb,OAAO+B,IACtBf,EAAW,SAsBX,2BAAO4B,MAAO7B,EAAS8B,SAlBV,SAACR,GACtBrB,EAAWqB,EAAMS,OAAOF,UAkBhB,4BAAQG,KAAK,UAAb,SAEJ,kBAAC,EAAD,Q,MCpFZC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.b0e5e075.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Note = ({ note, toggleImportance }) => {\r\n    const label = note.important\r\n        ?   'make not important' : 'make important'\r\n    return (\r\n        <li className='note'>\r\n            {note.content} \r\n            <button onClick={toggleImportance}>{label}</button>\r\n        </li>\r\n    )\r\n}\r\n\r\nexport default Note","import axios from 'axios'\r\nconst baseUrl = '/notes'\r\n\r\nconst getAll = () => {\r\n    const request = axios.get(baseUrl)\r\n    const nonExisting = {\r\n        id: 10000,\r\n        content: 'This note is not saved to the server',\r\n        date: '2019-05-30T17:30:31.098Z',\r\n        important: true,\r\n    }\r\n    return request.then(response => response.data.concat(nonExisting))\r\n\r\n}\r\n\r\nconst create = newObject => {\r\n    const request = axios.post(baseUrl, newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nexport default { getAll, create, update }","import React from 'react'\r\n\r\nconst Notification = ({message}) => {\r\n    if (message === null) {\r\n        return null\r\n    }\r\n\r\n    return (\r\n        <div className=\"error\">\r\n            {message}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Notification","import React from 'react'\r\n\r\nconst Footer = () => {\r\n    const footerStyle = {\r\n        color: 'green',\r\n        fontStyle: 'italic',\r\n        fontSize: 16\r\n    }\r\n\r\n    return (\r\n        <div style={footerStyle}>\r\n            <br />\r\n            <em>Note app, Department of Learning to Program, Betty Van 2019</em>\r\n        </div>\r\n    )\r\n}\r\nexport default Footer","import React, {useState, useEffect} from 'react'\r\nimport Note from './components/Note'\r\nimport noteService from './services/notes'\r\nimport Notification from './components/Notification'\r\nimport Footer from './components/Footer'\r\n\r\nconst App = () => {\r\n    const [notes, setNotes] = useState([])\r\n    const [newNote, setNewNote] = useState('')\r\n    const [showAll, setShowAll] = useState(true)\r\n    const [errorMessage, setErrorMessage] = useState(null)\r\n\r\n    const notesToShow = showAll\r\n        ? notes\r\n        : notes.filter(note => note.important)\r\n\r\n    useEffect(() => {\r\n        noteService\r\n            .getAll()\r\n            .then(initialNotes => {\r\n                setNotes(initialNotes)\r\n            })\r\n    }, [])\r\n\r\n    const toggleImportanceOf = id => {\r\n        const note = notes.find(n => n.id === id)\r\n        const changedNote = { ...note, important: !note.important }\r\n\r\n        noteService\r\n            .update(id, changedNote)\r\n            .then(returnedNote => {\r\n                setNotes(notes.map(note => note.id !== id ? note : returnedNote))\r\n            })\r\n            .catch(error => {\r\n                setErrorMessage (\r\n                    `Note '${note.content}' was already removed from server`\r\n                )\r\n                setTimeout(() => {\r\n                    setErrorMessage(null)\r\n                }, 5000)\r\n                setNotes(notes.filter(n => n.id !== id))\r\n            })\r\n    }\r\n\r\n    const rows =() => notesToShow.map(note => \r\n        <Note \r\n            key={note.id} \r\n            note={note} \r\n            toggleImportance={() => toggleImportanceOf(note.id)} \r\n        />\r\n    )\r\n\r\n    const addNote = (event) => {\r\n        event.preventDefault()\r\n        const noteObject = {\r\n            content: newNote,\r\n            date: new Date().toISOString(),\r\n            important: Math.random() > 0.5,\r\n        }\r\n\r\n        noteService\r\n            .create(noteObject)\r\n            .then(returnedNote => {\r\n                setNotes(notes.concat(returnedNote))\r\n                setNewNote('')\r\n            })\r\n    }\r\n    \r\n    const handleNoteChange = (event) => {\r\n        setNewNote(event.target.value)\r\n    }\r\n\r\n    \r\n    return (\r\n        <div>\r\n            <h1>Notes</h1>\r\n            <Notification message={errorMessage} />\r\n            <div>\r\n                <button onClick={() => setShowAll(!showAll)}>\r\n                    show {showAll ? 'important' : 'all'}\r\n                </button>\r\n            </div>\r\n            <ul>\r\n                {rows()}\r\n            </ul>\r\n            <form onSubmit={addNote}>\r\n                <input value={newNote} onChange={handleNoteChange} />\r\n                <button type=\"submit\">save</button>\r\n            </form>\r\n            <Footer />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)\n\n\n\n"],"sourceRoot":""}